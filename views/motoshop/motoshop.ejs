<div class="row">
	<div class="col-xs-12 col-md-12"><%-motoshop.mts_descrip%></div>
	<div class="col-xs-12 col-md-12 motoshopMap" id="mtsMap"></div>
	<ul class="motoshopAddressList">
	<% motoshop.address_list.forEach(function (address) { %>
	<li class="motoshopAddress">
		<div><span class="mts-address">адрес:</span> <a href="javascript:void(0);" class="_js_mts_addres_id" data-coords="<%=[address["mts_address_latitude"], address["mts_address_longitude"]].join(',')%>"><%=address["mts_address"]%></a></div>
		<div><span class="mts-address-website">сайт:</span> <a href="http://<%=address["mts_address_website"]%>" target="_blank" ><%=address["mts_address_website"]%></a></div>
		<div><span class="mts-address-email">e-mail:</span> <%=address["mts_address_email"]%></div>
		<div><span class="mts-address-phones">тел.:</span> <ul><li><%-(address["mts_address_phones"].split(',')).join('</li><li>')%></li></ul></div>
	</li>
	<%});%>
	</ul>
</div>
<script src="/js/mcMap.js" type="text/javascript"></script>
<script type="text/javascript">
	//<!--
	(function($)
	{
		var motoshop = MCJS["motoshop"] || {};
		var motoshopAddressList = motoshop["address_list"] || [];

		var mapState = {
			//controls: ["zoomControl", "searchControl", "typeSelector"]
			controls: ["zoomControl", "typeSelector"]
			, zoom: 10
			, type: 'yandex#hybrid'
			, behaviors: ["default"]
		};
		var mapOptions = {}, mapCluster = {};

		//ключи - id объекта, значения - гео-коллекция точек
		var placeMarkLocations = [];
		var MtsMcMap = new McMap('mtsMap', {state: mapState, options: mapOptions});

		MtsMcMap.init()
				.then(function (MtsMap)
				{
					mapCluster = cluster(motoshop);

					MtsMap.geoObjects.add(mapCluster);

					MtsMap.setBounds(mapCluster.getBounds(),
							{
								checkZoomRange: true
							});
					onClickMtsAddress(MtsMap);
					return ymaps.vow.resolve(MtsMap);
				})
				.fail(function (err)
				{
					console.log(err);
				});

		/**
		 * создаем гео-точку на основе данных
		 *
		 * @param motoshop - данные по салону
		 * @param mtsAddress - данные по адресу
		 */
		function makePlacemark(motoshop, mtsAddress)
		{
			var coords = [mtsAddress["mts_address_latitude"], mtsAddress["mts_address_longitude"]];

			var balloonContentBody = [
				mtsAddress["mts_address"],
				"широта: " + mtsAddress.mts_address_latitude + " (" + mtsAddress.mts_address_gps_lat + ")",
				"долгота: " + mtsAddress.mts_address_longitude + " (" + mtsAddress.mts_address_gps_lng + ")"
			];

			return new ymaps.Placemark(coords,
					{
						iconContent: motoshop["mts_name"]
						, iconCaption: motoshop["mts_name"]
						,	balloonContentHeader: motoshop["mts_name"]
						,	balloonContentBody: balloonContentBody.join('<br/>')

					},
					{
						preset: 'islands#blueDotIconWithCaption'
					}
			);
		}

		/**
		 * создаем объект кластера с предустановленными настройками
		 */
		function makeCluster()
		{
			/**
			 * Создадим кластеризатор, вызвав функцию-конструктор.
			 * Список всех опций доступен в документации.
			 * @see https://api.yandex.ru/maps/doc/jsapi/2.1/ref/reference/Clusterer.xml#constructor-summary
			 */
			return new ymaps.Clusterer({
				/**
				 * Через кластеризатор можно указать только стили кластеров,
				 * стили для меток нужно назначать каждой метке отдельно.
				 * @see https://api.yandex.ru/maps/doc/jsapi/2.1/ref/reference/option.presetStorage.xml
				 */
				preset: 'islands#invertedBlueClusterIcons',
				/**
				 * Ставим true, если хотим кластеризовать только точки с одинаковыми координатами.
				 */
				groupByCoordinates: false,
				/**
				 * Опции кластеров указываем в кластеризаторе с префиксом "cluster".
				 * @see https://api.yandex.ru/maps/doc/jsapi/2.1/ref/reference/ClusterPlacemark.xml
				 */
				clusterDisableClickZoom: true,
				clusterHideIconOnBalloonOpen: false,
				geoObjectHideIconOnBalloonOpen: false
			});
		}

		function cluster(motoshop)
		{
			var i, cluster;
			for(i = 0; i < motoshopAddressList.length; i++)
				placeMarkLocations.push(makePlacemark(motoshop, motoshopAddressList[i]));

			cluster = makeCluster();

			for(var pm in placeMarkLocations)
				cluster.add(placeMarkLocations[pm]);

			return cluster;
		}

		/**
		 * клики по локации в меню (стране или области или городу .. и тп)
		 */
		function onClickMtsAddress(MtsMap)
		{
			var $addres = $("._js_mts_addres_id");

			$addres.on('click', function (event)
			{
				event.preventDefault();
				event.stopPropagation();

				var coords = $(this).attr("data-coords").split(',');

				MtsMap.setCenter(coords, 14, {checkZoomRange: true});

				var toScroll = parseInt($(MtsMap.container.getElement()).offset().top, 10) - 50 - $('#navbarFixedTop').outerHeight();
				$(window).delay(600).scrollTo(toScroll, 600, {axis:'y', interrupt: true, limit: false});
			});

		}

		/**
		 * получаем массив точек для указанной локации (сатрны, области, города и тп)
		 * @param l_id
		 * @returns {Array}
		 */
		function getLocationPointsCoords(l_id)
		{
			var listOfCoords = [];
			for (var i in placeMarkLocations[l_id])
			{
				if (!placeMarkLocations[l_id].hasOwnProperty(i))
					continue;

				listOfCoords.push(placeMarkLocations[l_id][i]["geometry"].getCoordinates());
			}

			return listOfCoords;
		}

	})(jQuery);
	//-->
</script>