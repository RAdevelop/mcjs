<%  if(!isXHR){%><%- layout('layout/default.ejs') %><% } %>
<%- include toolbar.ejs %>
<h1><%=menuItem.m_h1%> на карте</h1>

<div class="row mototrekMapContainer">
	<div class="col-xs-12 col-md-3">
		<div class="mttLocationsNames  open">
			<button class="btn btn-default dropdown-toggle" type="button" id="dropdownLocationsNames"  aria-haspopup="true" aria-expanded="true">Регионы <span class="caret"></span></button>
			<ul class=" dropdown-menu" aria-labelledby="dropdownLocationsNames"><% trekLocations.forEach(function (item, i, list)
				{ %><li style="padding-left: <%=item["l_mtt_level"]%>0px;">
					<a href="javascript:void(0);" data-coords="<%=[item["l_latitude"], item["l_longitude"]]%>" data-location-id="<%=item["l_id"]%>"><%=item["l_name"]%></a>
				</li><%
				if (list[i+1] && list[i+1]["l_level"] == 1){
				%><li role="separator" class="divider"></li><%
				}
				});%></ul>
		</div>
	</div>
	<div class="col-xs-12 col-md-9 mototrekMap" id="mttMap"></div>
</div>
<script src="/js/mcMap.js" type="text/javascript"></script>
<script type="text/javascript">
//<!--
(function($)
{
	var $dropdownLocationsNames = $('#dropdownLocationsNames');
	var trekList = MCJS["trekList"] || [];
	var trekLocations = MCJS["trekLocations"] || [];

	var mapState = {
		//controls: ["zoomControl", "searchControl", "typeSelector"]
		controls: ["zoomControl", "typeSelector"]
		, zoom: 10
		, type: 'yandex#hybrid'
		, behaviors: ["default"]
	};
	var mapOptions = {}, mapCluster = {};

	//ключи - id объекта, значения - гео-коллекция точек
	var placeMarkLocations = {};
	var MttMcMap = new McMap('mttMap', {state: mapState, options: mapOptions});

	MttMcMap.init()
			.then(function (MttMap)
			{
				mapCluster = cluster();

				MttMap.geoObjects.add(mapCluster);

				MttMap.setBounds(mapCluster.getBounds(),
						{
							checkZoomRange: true
						})
						.then(function ()
						{
							onClickDropdownLocationsNames();
							onClickMttLocationsNames(MttMap);
						});
			});

	/**
	 * создаем гео-точку на основе данных трека
	 * @param trek - данные по треку
	 */
	function makePlacemark(trek)
	{
		var coords = [trek["mtt_latitude"], trek["mtt_longitude"]];

		var balloonContentBody = [
			trek["mtt_address"],
			trek.mtt_latitude + " (" + trek.mtt_gps_lat + ")",
			trek.mtt_longitude + " (" + trek.mtt_gps_lng + ")"
		];



		return new ymaps.Placemark(coords,
				{
					iconContent: trek["mtt_name"]
					, iconCaption: trek["mtt_name"]
					,	balloonContentHeader: trek["mtt_name"]
					,	balloonContentBody: balloonContentBody.join('<br/>')
					,	balloonContentFooter: '<a href="<%=menuItem.m_path%>/'+trek["mtt_id"]+'/">перейти на страницу трека</a>'
				},
				{
					preset: 'islands#blueDotIconWithCaption'
				}
		);
	}

	/**
	 * создаем объект кластера с предустановленными настройками
	 */
	function makeCluster()
	{
		/**
		 * Создадим кластеризатор, вызвав функцию-конструктор.
		 * Список всех опций доступен в документации.
		 * @see https://api.yandex.ru/maps/doc/jsapi/2.1/ref/reference/Clusterer.xml#constructor-summary
		 */
		return new ymaps.Clusterer({
			/**
			 * Через кластеризатор можно указать только стили кластеров,
			 * стили для меток нужно назначать каждой метке отдельно.
			 * @see https://api.yandex.ru/maps/doc/jsapi/2.1/ref/reference/option.presetStorage.xml
			 */
			preset: 'islands#invertedBlueClusterIcons',
			/**
			 * Ставим true, если хотим кластеризовать только точки с одинаковыми координатами.
			 */
			groupByCoordinates: false,
			/**
			 * Опции кластеров указываем в кластеризаторе с префиксом "cluster".
			 * @see https://api.yandex.ru/maps/doc/jsapi/2.1/ref/reference/ClusterPlacemark.xml
			 */
			clusterDisableClickZoom: true,
			clusterHideIconOnBalloonOpen: false,
			geoObjectHideIconOnBalloonOpen: false
		});
	}

	function cluster()
	{
		var i, tl, placemark, cluster, mtt_location_pids;
		for(i = 0; i < trekList.length; i++)
		{
			placemark = makePlacemark(trekList[i]);

			mtt_location_pids = trekList[i]["mtt_location_pids"].split(',');
			for(tl=0; tl < trekLocations.length; tl++)
			{
				if (mtt_location_pids.indexOf(trekLocations[tl]["l_id"]) != -1)
				{
					if (!placeMarkLocations.hasOwnProperty(trekLocations[tl]["l_id"]))
						placeMarkLocations[trekLocations[tl]["l_id"]] = [];

					placeMarkLocations[trekLocations[tl]["l_id"]].push(placemark);
				}
			}
		}

		cluster = makeCluster();

		for(var l_id in placeMarkLocations)
			cluster.add(placeMarkLocations[l_id]);

		return cluster;
	}

	/**
	 * клики по локации в меню (стране или области или городу .. и тп)
	 */
	function onClickMttLocationsNames(MttMap)
	{
		$(".mttLocationsNames a").click(function (event)
		{
			event.preventDefault();
			var coords = $(this).attr("data-coords").split(',');
			var l_id = $(this).attr("data-location-id");

			var bounds =  getLocationPointsCoords(l_id);
			var cnt = bounds.length;
				bounds = bounds.concat([coords]);

			var centerAndZoom = ymaps.util.bounds.getCenterAndZoom(bounds, MttMap.container.getSize());
			var center = (cnt > 1 ? centerAndZoom.center : bounds[0]);

				bounds =  ymaps.util.bounds.fromPoints(bounds);

			MttMap.setCenter(center, centerAndZoom.zoom, {checkZoomRange: true});
			MttMap.setBounds(bounds, {checkZoomRange: false})
					.then(function ()
					{
						MttMap.setCenter(center, MttMap.getZoom(), {checkZoomRange: false});
						$dropdownLocationsNames.click();
					});
		});
	}

	/**
	 * получаем массив точек для указанной локации (сатрны, области, города и тп)
	 * @param l_id
	 * @returns {Array}
	 */
	function getLocationPointsCoords(l_id)
	{
		var listOfCoords = [];
		for (var i in placeMarkLocations[l_id])
		{
			if (!placeMarkLocations[l_id].hasOwnProperty(i))
				continue;

			listOfCoords.push(placeMarkLocations[l_id][i]["geometry"].getCoordinates());
		}

		return listOfCoords;
	}

	function onClickDropdownLocationsNames()
	{
		$dropdownLocationsNames.click(function (event)
		{
			event.preventDefault();
			$(this).parent().find('.dropdown-menu').toggle();
			console.log(this);
		});
	}
})($);
//-->
</script>