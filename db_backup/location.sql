/*
SQLyog Ultimate v9.50 
MySQL - 5.5.28 : Database - wwwmotocommunity
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
/*Table structure for table `location` */

DROP TABLE IF EXISTS `location`;

CREATE TABLE `location` (
  `l_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `l_pid` int(10) unsigned NOT NULL DEFAULT '0',
  `l_level` mediumint(5) unsigned NOT NULL DEFAULT '0',
  `l_lk` int(10) unsigned NOT NULL DEFAULT '0',
  `l_rk` int(10) unsigned NOT NULL DEFAULT '0',
  `old_id` int(10) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`l_id`),
  KEY `lr_level` (`l_lk`,`l_rk`,`l_level`),
  KEY `level` (`l_level`)
) ENGINE=InnoDB AUTO_INCREMENT=710 DEFAULT CHARSET=utf8;

/*Data for the table `location` */

insert  into `location`(`l_id`,`l_pid`,`l_level`,`l_lk`,`l_rk`,`old_id`) values (1,0,1,1,2,48),(2,0,1,3,4,1),(3,0,1,5,6,14918),(4,0,1,7,8,2),(5,0,1,9,10,3),(6,0,1,11,12,42186),(7,0,1,13,14,4782),(8,0,1,15,16,5416),(9,0,1,17,18,23939),(10,0,1,19,20,33501),(11,0,1,21,74,4),(12,0,1,75,76,5),(13,0,1,77,78,6),(14,0,1,79,80,97938),(15,0,1,81,82,7),(16,0,1,83,84,3373),(17,0,1,85,86,47163),(18,0,1,87,88,8),(19,0,1,89,90,9),(20,0,1,91,92,10),(21,0,1,93,94,45851),(22,0,1,95,96,17090),(23,0,1,97,98,43044),(24,0,1,99,100,43059),(25,0,1,101,102,11),(26,0,1,103,104,15048),(27,0,1,105,106,50),(28,0,1,107,108,12),(29,0,1,109,110,83958),(30,0,1,111,112,13),(31,0,1,113,114,32949),(32,0,1,115,116,4598),(33,0,1,117,118,33153),(34,0,1,119,120,4241),(35,0,1,121,122,33665),(36,0,1,123,124,14),(37,0,1,125,126,15),(38,0,1,127,128,16),(39,0,1,129,130,17),(40,0,1,131,132,5980),(41,0,1,133,134,491),(42,0,1,135,136,45406),(43,0,1,137,138,18),(44,0,1,139,140,64692),(45,0,1,141,142,2445),(46,0,1,143,144,5090),(47,0,1,145,146,32911),(48,0,1,147,148,5675),(49,0,1,149,150,19),(50,0,1,151,152,5415),(51,0,1,153,154,20),(52,0,1,155,156,21),(53,0,1,157,158,22),(54,0,1,159,160,4401),(55,0,1,161,162,23),(56,0,1,163,164,5725),(57,0,1,165,166,24),(58,0,1,167,168,3789),(59,0,1,169,174,25),(60,0,1,175,176,26),(61,0,1,177,178,74337),(62,0,1,179,180,42743),(63,0,1,181,182,27),(64,0,1,183,184,35468),(65,0,1,185,186,28),(66,0,1,187,188,32820),(67,0,1,189,190,83322),(68,0,1,191,192,29),(69,0,1,193,194,30),(70,0,1,195,196,45670),(71,0,1,197,1100,31),(72,0,1,1101,1102,32),(73,0,1,1103,1104,72879),(74,0,1,1105,1106,33),(75,0,1,1107,1108,4059),(76,0,1,1109,1110,34),(77,0,1,1111,1112,4109),(78,0,1,1113,1114,42823),(79,0,1,1115,1116,35),(80,0,1,1117,1118,36),(81,0,1,1119,1120,51),(82,0,1,1121,1122,4225),(83,0,1,1123,1124,15474),(84,0,1,1125,1126,97239),(85,0,1,1127,1128,4255),(86,0,1,1129,1130,22824),(87,0,1,1131,1390,37),(88,0,1,1391,1392,38),(89,0,1,1393,1394,32885),(90,0,1,1395,1396,39),(91,0,1,1397,1398,40),(92,0,1,1399,1400,41),(93,0,1,1401,1402,42),(94,0,1,1403,1404,43),(95,0,1,1405,1406,33802),(96,0,1,1407,1408,44),(97,0,1,1409,1410,45),(98,0,1,1411,1412,5750),(99,0,1,1413,1414,46),(100,0,1,1415,1416,3029),(101,0,1,1417,1418,49),(102,11,2,22,29,1),(103,11,2,30,39,2),(104,11,2,40,51,3),(105,11,2,52,57,4),(106,11,2,58,69,5),(107,11,2,70,73,6),(108,59,2,170,173,113),(109,71,2,198,205,32),(110,71,2,206,211,33),(111,71,2,212,217,34),(112,71,2,218,221,35),(113,71,2,222,231,36),(114,71,2,232,235,37),(115,71,2,236,253,38),(116,71,2,254,263,39),(117,71,2,264,265,40),(118,71,2,266,273,41),(119,71,2,274,277,42),(120,71,2,278,279,43),(121,71,2,280,289,44),(122,71,2,290,303,45),(123,71,2,304,307,46),(124,71,2,308,311,47),(125,71,2,312,325,48),(126,71,2,326,329,49),(127,71,2,330,333,50),(128,71,2,334,353,51),(129,71,2,354,359,52),(130,71,2,360,363,53),(131,71,2,364,387,54),(132,71,2,388,407,55),(133,71,2,408,413,56),(134,71,2,414,421,57),(135,71,2,422,431,58),(136,71,2,432,435,59),(137,71,2,436,611,60),(138,71,2,612,617,61),(139,71,2,618,621,62),(140,71,2,622,643,63),(141,71,2,644,655,64),(142,71,2,656,663,65),(143,71,2,664,667,66),(144,71,2,668,677,67),(145,71,2,678,681,68),(146,71,2,682,689,69),(147,71,2,690,697,70),(148,71,2,698,707,71),(149,71,2,708,713,72),(150,71,2,714,717,73),(151,71,2,718,721,74),(152,71,2,722,737,75),(153,71,2,738,741,76),(154,71,2,742,751,77),(155,71,2,752,755,78),(156,71,2,756,759,79),(157,71,2,760,765,80),(158,71,2,766,773,81),(159,71,2,774,789,7),(160,71,2,790,795,82),(161,71,2,796,799,83),(162,71,2,800,805,84),(163,71,2,806,809,85),(164,71,2,810,825,86),(165,71,2,826,829,87),(166,71,2,830,837,88),(167,71,2,838,855,89),(168,71,2,856,861,90),(169,71,2,862,873,91),(170,71,2,874,929,92),(171,71,2,930,943,93),(172,71,2,944,945,94),(173,71,2,946,961,95),(174,71,2,962,971,96),(175,71,2,972,985,97),(176,71,2,986,991,98),(177,71,2,992,1003,99),(178,71,2,1004,1009,100),(179,71,2,1010,1017,101),(180,71,2,1018,1023,102),(181,71,2,1024,1033,103),(182,71,2,1034,1037,104),(183,71,2,1038,1045,105),(184,71,2,1046,1059,106),(185,71,2,1060,1077,107),(186,71,2,1078,1081,108),(187,71,2,1082,1089,109),(188,71,2,1090,1093,110),(189,71,2,1094,1095,111),(190,71,2,1096,1099,112),(191,87,2,1132,1137,8),(192,87,2,1138,1145,9),(193,87,2,1146,1161,10),(194,87,2,1162,1181,11),(195,87,2,1182,1189,12),(196,87,2,1190,1199,13),(197,87,2,1200,1207,14),(198,87,2,1208,1215,15),(199,87,2,1216,1233,16),(200,87,2,1234,1241,17),(201,87,2,1242,1257,18),(202,87,2,1258,1267,19),(203,87,2,1268,1275,20),(204,87,2,1276,1287,21),(205,87,2,1288,1301,22),(206,87,2,1302,1309,23),(207,87,2,1310,1323,24),(208,87,2,1324,1329,25),(209,87,2,1330,1343,26),(210,87,2,1344,1355,27),(211,87,2,1356,1363,28),(212,87,2,1364,1373,29),(213,87,2,1374,1381,30),(214,87,2,1382,1389,31),(215,102,3,23,24,319),(216,102,3,25,26,320),(217,102,3,27,28,321),(218,103,3,31,32,322),(219,103,3,33,34,323),(220,103,3,35,36,324),(221,103,3,37,38,325),(222,104,3,41,42,326),(223,104,3,43,44,327),(224,104,3,45,46,328),(225,104,3,47,48,8824),(226,104,3,49,50,329),(227,105,3,53,54,330),(228,105,3,55,56,331),(229,106,3,59,60,332),(230,106,3,61,62,60213),(231,106,3,63,64,8765),(232,106,3,65,66,333),(233,106,3,67,68,496),(234,107,3,71,72,334),(235,108,3,171,172,60198),(236,109,3,199,200,1),(237,109,3,201,202,2),(238,109,3,203,204,3),(239,110,3,207,208,4),(240,110,3,209,210,5),(241,111,3,213,214,6),(242,111,3,215,216,7),(243,112,3,219,220,8),(244,113,3,223,224,9),(245,113,3,225,226,10),(246,113,3,227,228,11),(247,113,3,229,230,12),(248,114,3,233,234,13),(249,115,3,237,238,14),(250,115,3,239,240,15),(251,115,3,241,242,16),(252,115,3,243,244,60206),(253,115,3,245,246,17),(254,115,3,247,248,18),(255,115,3,249,250,19),(256,115,3,251,252,20),(257,116,3,255,256,21),(258,116,3,257,258,22),(259,116,3,259,260,60144),(260,116,3,261,262,23),(261,118,3,267,268,24),(262,118,3,269,270,5726),(263,118,3,271,272,25),(264,119,3,275,276,26),(265,121,3,281,282,60202),(266,121,3,283,284,27),(267,121,3,285,286,28),(268,121,3,287,288,8071),(269,122,3,291,292,29),(270,122,3,293,294,30),(271,122,3,295,296,31),(272,122,3,297,298,32),(273,122,3,299,300,33),(274,122,3,301,302,34),(275,123,3,305,306,35),(276,124,3,309,310,36),(277,125,3,313,314,507),(278,125,3,315,316,37),(279,125,3,317,318,38),(280,125,3,319,320,19161),(281,125,3,321,322,39),(282,125,3,323,324,60211),(283,126,3,327,328,40),(284,127,3,331,332,41),(285,128,3,335,336,42),(286,128,3,337,338,43),(287,128,3,339,340,44),(288,128,3,341,342,45),(289,128,3,343,344,46),(290,128,3,345,346,47),(291,128,3,347,348,48),(292,128,3,349,350,49),(293,128,3,351,352,50),(294,129,3,355,356,51),(295,129,3,357,358,52),(296,130,3,361,362,53),(297,131,3,365,366,54),(298,131,3,367,368,55),(299,131,3,369,370,56),(300,131,3,371,372,485),(301,131,3,373,374,60197),(302,131,3,375,376,60146),(303,131,3,377,378,57),(304,131,3,379,380,20599),(305,131,3,381,382,58),(306,131,3,383,384,497),(307,131,3,385,386,60210),(308,132,3,389,390,59),(309,132,3,391,392,60),(310,132,3,393,394,61),(311,132,3,395,396,62),(312,132,3,397,398,63),(313,132,3,399,400,64),(314,132,3,401,402,65),(315,132,3,403,404,66),(316,132,3,405,406,67),(317,133,3,409,410,68),(318,133,3,411,412,69),(319,134,3,415,416,70),(320,134,3,417,418,71),(321,134,3,419,420,72),(322,135,3,423,424,73),(323,135,3,425,426,74),(324,135,3,427,428,75),(325,135,3,429,430,76),(326,136,3,433,434,77),(327,137,3,437,438,78),(328,137,3,439,440,79),(329,137,3,441,442,508),(330,137,3,443,444,80),(331,137,3,445,446,81),(332,137,3,447,448,82),(333,137,3,449,450,83),(334,137,3,451,452,60208),(335,137,3,453,454,84),(336,137,3,455,456,85),(337,137,3,457,458,86),(338,137,3,459,460,87),(339,137,3,461,462,88),(340,137,3,463,464,89),(341,137,3,465,466,90),(342,137,3,467,468,91),(343,137,3,469,470,92),(344,137,3,471,472,93),(345,137,3,473,474,94),(346,137,3,475,476,505),(347,137,3,477,478,95),(348,137,3,479,480,59949),(349,137,3,481,482,96),(350,137,3,483,484,97),(351,137,3,485,486,98),(352,137,3,487,488,99),(353,137,3,489,490,100),(354,137,3,491,492,101),(355,137,3,493,494,60214),(356,137,3,495,496,102),(357,137,3,497,498,103),(358,137,3,499,500,104),(359,137,3,501,502,105),(360,137,3,503,504,106),(361,137,3,505,506,107),(362,137,3,507,508,108),(363,137,3,509,510,109),(364,137,3,511,512,110),(365,137,3,513,514,111),(366,137,3,515,516,60215),(367,137,3,517,518,112),(368,137,3,519,520,113),(369,137,3,521,522,114),(370,137,3,523,524,115),(371,137,3,525,526,116),(372,137,3,527,528,59946),(373,137,3,529,530,117),(374,137,3,531,532,59944),(375,137,3,533,534,118),(376,137,3,535,536,119),(377,137,3,537,538,120),(378,137,3,539,540,59940),(379,137,3,541,542,121),(380,137,3,543,544,122),(381,137,3,545,546,123),(382,137,3,547,548,124),(383,137,3,549,550,125),(384,137,3,551,552,126),(385,137,3,553,554,59938),(386,137,3,555,556,127),(387,137,3,557,558,128),(388,137,3,559,560,129),(389,137,3,561,562,130),(390,137,3,563,564,60212),(391,137,3,565,566,477),(392,137,3,567,568,131),(393,137,3,569,570,132),(394,137,3,571,572,133),(395,137,3,573,574,134),(396,137,3,575,576,135),(397,137,3,577,578,136),(398,137,3,579,580,137),(399,137,3,581,582,8169),(400,137,3,583,584,138),(401,137,3,585,586,139),(402,137,3,587,588,140),(403,137,3,589,590,141),(404,137,3,591,592,142),(405,137,3,593,594,143),(406,137,3,595,596,39756),(407,137,3,597,598,144),(408,137,3,599,600,145),(409,137,3,601,602,146),(410,137,3,603,604,147),(411,137,3,605,606,148),(412,137,3,607,608,149),(413,137,3,609,610,150),(414,138,3,613,614,151),(415,138,3,615,616,152),(416,139,3,619,620,153),(417,140,3,623,624,154),(418,140,3,625,626,155),(419,140,3,627,628,156),(420,140,3,629,630,157),(421,140,3,631,632,158),(422,140,3,633,634,159),(423,140,3,635,636,160),(424,140,3,637,638,161),(425,140,3,639,640,39572),(426,140,3,641,642,162),(427,141,3,645,646,60193),(428,141,3,647,648,163),(429,141,3,649,650,164),(430,141,3,651,652,165),(431,141,3,653,654,166),(432,142,3,657,658,167),(433,142,3,659,660,168),(434,142,3,661,662,169),(435,143,3,665,666,170),(436,144,3,669,670,171),(437,144,3,671,672,172),(438,144,3,673,674,173),(439,144,3,675,676,174),(440,145,3,679,680,175),(441,146,3,683,684,176),(442,146,3,685,686,177),(443,146,3,687,688,178),(444,147,3,691,692,179),(445,147,3,693,694,180),(446,147,3,695,696,181),(447,148,3,699,700,182),(448,148,3,701,702,183),(449,148,3,703,704,184),(450,148,3,705,706,185),(451,149,3,709,710,186),(452,149,3,711,712,187),(453,150,3,715,716,188),(454,151,3,719,720,189),(455,152,3,723,724,190),(456,152,3,725,726,191),(457,152,3,727,728,192),(458,152,3,729,730,193),(459,152,3,731,732,194),(460,152,3,733,734,195),(461,152,3,735,736,196),(462,153,3,739,740,197),(463,154,3,743,744,198),(464,154,3,745,746,199),(465,154,3,747,748,200),(466,154,3,749,750,201),(467,155,3,753,754,202),(468,156,3,757,758,203),(469,157,3,761,762,204),(470,157,3,763,764,205),(471,158,3,767,768,206),(472,158,3,769,770,207),(473,158,3,771,772,208),(474,159,3,775,776,335),(475,159,3,777,778,336),(476,159,3,779,780,478),(477,159,3,781,782,337),(478,159,3,783,784,504),(479,159,3,785,786,338),(480,159,3,787,788,339),(481,160,3,791,792,209),(482,160,3,793,794,210),(483,161,3,797,798,211),(484,162,3,801,802,212),(485,162,3,803,804,213),(486,163,3,807,808,214),(487,164,3,811,812,215),(488,164,3,813,814,216),(489,164,3,815,816,217),(490,164,3,817,818,218),(491,164,3,819,820,219),(492,164,3,821,822,220),(493,164,3,823,824,221),(494,165,3,827,828,222),(495,166,3,831,832,223),(496,166,3,833,834,224),(497,166,3,835,836,225),(498,167,3,839,840,60194),(499,167,3,841,842,226),(500,167,3,843,844,28535),(501,167,3,845,846,227),(502,167,3,847,848,21190),(503,167,3,849,850,228),(504,167,3,851,852,229),(505,167,3,853,854,230),(506,168,3,857,858,231),(507,168,3,859,860,60201),(508,169,3,863,864,232),(509,169,3,865,866,42104),(510,169,3,867,868,233),(511,169,3,869,870,234),(512,169,3,871,872,235),(513,170,3,875,876,236),(514,170,3,877,878,237),(515,170,3,879,880,238),(516,170,3,881,882,239),(517,170,3,883,884,240),(518,170,3,885,886,241),(519,170,3,887,888,242),(520,170,3,889,890,243),(521,170,3,891,892,244),(522,170,3,893,894,245),(523,170,3,895,896,246),(524,170,3,897,898,1990),(525,170,3,899,900,247),(526,170,3,901,902,248),(527,170,3,903,904,44105),(528,170,3,905,906,249),(529,170,3,907,908,250),(530,170,3,909,910,251),(531,170,3,911,912,252),(532,170,3,913,914,253),(533,170,3,915,916,254),(534,170,3,917,918,255),(535,170,3,919,920,256),(536,170,3,921,922,257),(537,170,3,923,924,258),(538,170,3,925,926,259),(539,170,3,927,928,60180),(540,171,3,931,932,260),(541,171,3,933,934,261),(542,171,3,935,936,262),(543,171,3,937,938,60195),(544,171,3,939,940,263),(545,171,3,941,942,264),(546,173,3,947,948,265),(547,173,3,949,950,266),(548,173,3,951,952,267),(549,173,3,953,954,268),(550,173,3,955,956,269),(551,173,3,957,958,270),(552,173,3,959,960,60196),(553,174,3,963,964,506),(554,174,3,965,966,271),(555,174,3,967,968,272),(556,174,3,969,970,273),(557,175,3,973,974,274),(558,175,3,975,976,275),(559,175,3,977,978,276),(560,175,3,979,980,277),(561,175,3,981,982,278),(562,175,3,983,984,279),(563,176,3,987,988,280),(564,176,3,989,990,281),(565,177,3,993,994,282),(566,177,3,995,996,283),(567,177,3,997,998,60142),(568,177,3,999,1000,284),(569,177,3,1001,1002,869),(570,178,3,1005,1006,285),(571,178,3,1007,1008,286),(572,179,3,1011,1012,287),(573,179,3,1013,1014,288),(574,179,3,1015,1016,289),(575,180,3,1019,1020,290),(576,180,3,1021,1022,291),(577,181,3,1025,1026,292),(578,181,3,1027,1028,293),(579,181,3,1029,1030,294),(580,181,3,1031,1032,295),(581,182,3,1035,1036,296),(582,183,3,1039,1040,297),(583,183,3,1041,1042,298),(584,183,3,1043,1044,299),(585,184,3,1047,1048,300),(586,184,3,1049,1050,301),(587,184,3,1051,1052,302),(588,184,3,1053,1054,303),(589,184,3,1055,1056,304),(590,184,3,1057,1058,305),(591,185,3,1061,1062,306),(592,185,3,1063,1064,307),(593,185,3,1065,1066,308),(594,185,3,1067,1068,309),(595,185,3,1069,1070,310),(596,185,3,1071,1072,311),(597,185,3,1073,1074,312),(598,185,3,1075,1076,313),(599,186,3,1079,1080,314),(600,187,3,1083,1084,315),(601,187,3,1085,1086,316),(602,187,3,1087,1088,317),(603,188,3,1091,1092,318),(604,190,3,1097,1098,60203),(605,191,3,1133,1134,340),(606,191,3,1135,1136,341),(607,192,3,1139,1140,342),(608,192,3,1141,1142,343),(609,192,3,1143,1144,344),(610,193,3,1147,1148,345),(611,193,3,1149,1150,346),(612,193,3,1151,1152,347),(613,193,3,1153,1154,348),(614,193,3,1155,1156,349),(615,193,3,1157,1158,350),(616,193,3,1159,1160,351),(617,194,3,1163,1164,352),(618,194,3,1165,1166,46343),(619,194,3,1167,1168,353),(620,194,3,1169,1170,354),(621,194,3,1171,1172,355),(622,194,3,1173,1174,356),(623,194,3,1175,1176,357),(624,194,3,1177,1178,358),(625,194,3,1179,1180,359),(626,195,3,1183,1184,360),(627,195,3,1185,1186,361),(628,195,3,1187,1188,362),(629,196,3,1191,1192,363),(630,196,3,1193,1194,364),(631,196,3,1195,1196,365),(632,196,3,1197,1198,366),(633,197,3,1201,1202,367),(634,197,3,1203,1204,368),(635,197,3,1205,1206,369),(636,198,3,1209,1210,370),(637,198,3,1211,1212,371),(638,198,3,1213,1214,372),(639,199,3,1217,1218,373),(640,199,3,1219,1220,374),(641,199,3,1221,1222,375),(642,199,3,1223,1224,376),(643,199,3,1225,1226,377),(644,199,3,1227,1228,2189),(645,199,3,1229,1230,378),(646,199,3,1231,1232,379),(647,200,3,1235,1236,422),(648,200,3,1237,1238,423),(649,200,3,1239,1240,424),(650,201,3,1243,1244,425),(651,201,3,1245,1246,426),(652,201,3,1247,1248,427),(653,201,3,1249,1250,428),(654,201,3,1251,1252,429),(655,201,3,1253,1254,430),(656,201,3,1255,1256,431),(657,202,3,1259,1260,432),(658,202,3,1261,1262,433),(659,202,3,1263,1264,434),(660,202,3,1265,1266,435),(661,203,3,1269,1270,436),(662,203,3,1271,1272,437),(663,203,3,1273,1274,438),(664,204,3,1277,1278,439),(665,204,3,1279,1280,440),(666,204,3,1281,1282,441),(667,204,3,1283,1284,442),(668,204,3,1285,1286,443),(669,205,3,1289,1290,27679),(670,205,3,1291,1292,444),(671,205,3,1293,1294,445),(672,205,3,1295,1296,446),(673,205,3,1297,1298,447),(674,205,3,1299,1300,502),(675,206,3,1303,1304,448),(676,206,3,1305,1306,449),(677,206,3,1307,1308,450),(678,207,3,1311,1312,43078),(679,207,3,1313,1314,451),(680,207,3,1315,1316,452),(681,207,3,1317,1318,60199),(682,207,3,1319,1320,453),(683,207,3,1321,1322,454),(684,208,3,1325,1326,455),(685,208,3,1327,1328,456),(686,209,3,1331,1332,457),(687,209,3,1333,1334,458),(688,209,3,1335,1336,18716),(689,209,3,1337,1338,459),(690,209,3,1339,1340,460),(691,209,3,1341,1342,461),(692,210,3,1345,1346,462),(693,210,3,1347,1348,18553),(694,210,3,1349,1350,463),(695,210,3,1351,1352,464),(696,210,3,1353,1354,465),(697,211,3,1357,1358,466),(698,211,3,1359,1360,467),(699,211,3,1361,1362,468),(700,212,3,1365,1366,469),(701,212,3,1367,1368,470),(702,212,3,1369,1370,471),(703,212,3,1371,1372,472),(704,213,3,1375,1376,473),(705,213,3,1377,1378,474),(706,213,3,1379,1380,475),(707,214,3,1383,1384,45177),(708,214,3,1385,1386,503),(709,214,3,1387,1388,476);

/*Table structure for table `location_names` */

DROP TABLE IF EXISTS `location_names`;

CREATE TABLE `location_names` (
  `l_id` int(10) unsigned NOT NULL,
  `l_pid` int(10) unsigned NOT NULL DEFAULT '0',
  `l_name` varchar(255) NOT NULL,
  PRIMARY KEY (`l_id`),
  UNIQUE KEY `pid_name` (`l_pid`,`l_name`(20))
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `location_names` */

insert  into `location_names`(`l_id`,`l_pid`,`l_name`) values (1,0,'Австралия'),(2,0,'Австрия'),(3,0,'Азербайджан'),(4,0,'Албания'),(5,0,'Андорра'),(6,0,'Аомынь'),(7,0,'Арабские Эмираты'),(8,0,'Аргентина'),(9,0,'Армения'),(10,0,'Бахрейн'),(11,0,'Беларусь'),(12,0,'Бельгия'),(13,0,'Болгария'),(14,0,'Боливия'),(15,0,'Босния и Герцеговина'),(16,0,'Бразилия'),(17,0,'Бруней'),(18,0,'Ватикан'),(19,0,'Великобритания'),(20,0,'Венгрия'),(21,0,'Венесуэла'),(22,0,'Вьетнам'),(23,0,'Габон'),(24,0,'Гватемала'),(25,0,'Германия'),(26,0,'Гондурас'),(27,0,'Гонконг'),(28,0,'Греция'),(29,0,'Грузия'),(30,0,'Дания'),(31,0,'Израиль'),(32,0,'Индия'),(33,0,'Индонезия'),(34,0,'Иордания'),(35,0,'Иран'),(36,0,'Ирландия'),(37,0,'Исландия'),(38,0,'Испания'),(39,0,'Италия'),(40,0,'Казахстан'),(41,0,'Канада'),(42,0,'Катар'),(43,0,'Кипр'),(44,0,'Киргизия'),(45,0,'Китай'),(46,0,'Колумбия'),(47,0,'Коста-Рика'),(48,0,'Кувейт'),(49,0,'Латвия'),(50,0,'Ливан'),(51,0,'Литва'),(52,0,'Лихтенштейн'),(53,0,'Люксембург'),(54,0,'Маврикий'),(55,0,'Македония'),(56,0,'Малайзия'),(57,0,'Мальта'),(58,0,'Мексика'),(59,0,'Молдавия'),(60,0,'Монако'),(61,0,'Мьянма'),(62,0,'Непал'),(63,0,'Нидерланды'),(64,0,'Новая Зеландия'),(65,0,'Норвегия'),(66,0,'Пакистан'),(67,0,'Перу'),(68,0,'Польша'),(69,0,'Португалия'),(70,0,'Пуэрто-Рико'),(71,0,'Россия'),(72,0,'Румыния'),(73,0,'Сальвадор'),(74,0,'Сан-Марино'),(75,0,'Саудовская Аравия'),(76,0,'Сербия'),(77,0,'Сингапур'),(78,0,'Сирия'),(79,0,'Словакия'),(80,0,'Словения'),(81,0,'США'),(82,0,'Таиланд'),(83,0,'Тайвань'),(84,0,'Тунис'),(85,0,'Турция'),(86,0,'Узбекистан'),(87,0,'Украина'),(88,0,'Фарерские острова'),(89,0,'Филиппины'),(90,0,'Финляндия'),(91,0,'Франция'),(92,0,'Хорватия'),(93,0,'Черногория'),(94,0,'Чехия'),(95,0,'Чили'),(96,0,'Швейцария'),(97,0,'Швеция'),(98,0,'Эквадор'),(99,0,'Эстония'),(100,0,'Южная Корея'),(101,0,'Япония'),(102,11,'Брестская область'),(103,11,'Витебская область'),(104,11,'Гомельская область'),(105,11,'Гродненская область'),(106,11,'Минская область'),(107,11,'Могилевская область'),(108,59,'Кишинев'),(109,71,'Алтайский край'),(110,71,'Амурская область'),(111,71,'Архангельская область'),(112,71,'Астраханская область'),(113,71,'Белгородская область'),(114,71,'Брянская область'),(115,71,'Владимирская область'),(116,71,'Волгоградская область'),(117,71,'Вологодская область'),(118,71,'Воронежская область'),(119,71,'Еврейская автономная область'),(120,71,'Забайкальский край'),(121,71,'Ивановская область'),(122,71,'Иркутская область'),(123,71,'Кабардино-Балкарская республика'),(124,71,'Калининградская область'),(125,71,'Калужская область'),(126,71,'Камчатский край'),(127,71,'Карачаево-Черкесская республика'),(128,71,'Кемеровская область'),(129,71,'Кировская область'),(130,71,'Костромская область'),(131,71,'Краснодарский край'),(132,71,'Красноярский край'),(133,71,'Курганская область'),(134,71,'Курская область'),(135,71,'Липецкая область'),(136,71,'Магаданская область'),(137,71,'Москва и Московская область'),(138,71,'Мурманская область'),(139,71,'Ненецкий автономный округ'),(140,71,'Нижегородская область'),(141,71,'Новгородская область'),(142,71,'Новосибирская область'),(143,71,'Омская область'),(144,71,'Оренбургская область'),(145,71,'Орловская область'),(146,71,'Пензенская область'),(147,71,'Пермский край'),(148,71,'Приморский край'),(149,71,'Псковская область'),(150,71,'Республика Адыгея'),(151,71,'Республика Алтай'),(152,71,'Республика Башкортостан'),(153,71,'Республика Бурятия'),(154,71,'Республика Дагестан'),(155,71,'Республика Ингушетия'),(156,71,'Республика Калмыкия'),(157,71,'Республика Карелия'),(158,71,'Республика Коми'),(159,71,'Республика Крым'),(160,71,'Республика Марий Эл'),(161,71,'Республика Мордовия'),(162,71,'Республика Саха (Якутия)'),(163,71,'Республика Северная Осетия-Алания'),(164,71,'Республика Татарстан'),(165,71,'Республика Тыва'),(166,71,'Республика Хакасия'),(167,71,'Ростовская область'),(168,71,'Рязанская область'),(169,71,'Самарская область'),(170,71,'Санкт-Петербург и Ленинградская область'),(171,71,'Саратовская область'),(172,71,'Сахалинская область'),(173,71,'Свердловская область'),(174,71,'Смоленская область'),(175,71,'Ставропольский край'),(176,71,'Тамбовская область'),(177,71,'Тверская область'),(178,71,'Томская область'),(179,71,'Тульская область'),(180,71,'Тюменская область'),(181,71,'Удмуртская республика'),(182,71,'Ульяновская область'),(183,71,'Хабаровский край'),(184,71,'Ханты-Мансийский АО - Югра'),(185,71,'Челябинская область'),(186,71,'Чеченская республика'),(187,71,'Чувашская республика'),(188,71,'Чукотский Автономный округ'),(189,71,'Ямало-Ненецкий автономный округ'),(190,71,'Ярославская область'),(191,87,'Винницкая область'),(192,87,'Волынская область'),(193,87,'Днепропетровская область'),(194,87,'Донецкая область'),(195,87,'Житомирская область'),(196,87,'Закарпатская область'),(197,87,'Запорожская область'),(198,87,'Ивано-Франковская область'),(199,87,'Киевская область'),(200,87,'Кировоградская область'),(201,87,'Луганская область'),(202,87,'Львовская область'),(203,87,'Николаевская область'),(204,87,'Одесская область'),(205,87,'Полтавская область'),(206,87,'Ровенская область'),(207,87,'Сумская область'),(208,87,'Тернопольская область'),(209,87,'Харьковская область'),(210,87,'Херсонская область'),(211,87,'Хмельницкая область'),(212,87,'Черкасская область'),(213,87,'Черниговская область'),(214,87,'Черновицкая область'),(215,102,'Барановичи'),(216,102,'Брест'),(217,102,'Пинск'),(218,103,'Витебск'),(219,103,'Новополоцк'),(220,103,'Орша'),(221,103,'Полоцк'),(222,104,'Гомель'),(223,104,'Жлобин'),(224,104,'Мозырь'),(225,104,'Речица'),(226,104,'Светлогорск'),(227,105,'Гродно'),(228,105,'Лида'),(229,106,'Борисов'),(230,106,'деревня Удранка'),(231,106,'Минск'),(232,106,'Молодечно'),(233,106,'Несвиж'),(234,107,'Могилев'),(235,108,'Вадул-луй-Водэ'),(236,109,'Барнаул'),(237,109,'Бийск'),(238,109,'Рубцовск'),(239,110,'Белогорск'),(240,110,'Благовещенск'),(241,111,'Архангельск'),(242,111,'Северодвинск'),(243,112,'Астрахань'),(244,113,'Белгород'),(245,113,'Губкин'),(246,113,'Старый Оскол'),(247,113,'Шебекино'),(248,114,'Брянск'),(249,115,'Александров'),(250,115,'Владимир'),(251,115,'Гусь-Хрустальный'),(252,115,'деревня Киржач'),(253,115,'Ковров'),(254,115,'Муром'),(255,115,'Покров'),(256,115,'Суздаль'),(257,116,'Волгоград'),(258,116,'Волжский'),(259,116,'Калач-на-дону'),(260,116,'Камышин'),(261,118,'Воронеж'),(262,118,'Липецк'),(263,118,'Россошь'),(264,119,'Биробиджан'),(265,121,'Заволжск'),(266,121,'Иваново'),(267,121,'Кинешма'),(268,121,'Шалдово'),(269,122,'Ангарск'),(270,122,'Братск'),(271,122,'Иркутск'),(272,122,'Усолье-Сибирское'),(273,122,'Усть-Илимск'),(274,122,'Черемхово'),(275,123,'Нальчик'),(276,124,'Калининград'),(277,125,'Величково'),(278,125,'Калуга'),(279,125,'Киров'),(280,125,'Малоярославец'),(281,125,'Обнинск'),(282,125,'Таруса'),(283,126,'Петропавловск-Камчатский'),(284,127,'Черкесск'),(285,128,'Анжеро-Судженск'),(286,128,'Белово'),(287,128,'Кемерово'),(288,128,'Киселёвск'),(289,128,'Ленинск-Кузнецкий'),(290,128,'Междуреченск'),(291,128,'Новокузнецк'),(292,128,'Прокопьевск'),(293,128,'Юрга'),(294,129,'Киров'),(295,129,'Кирово-Чепецк'),(296,130,'Кострома'),(297,131,'Армавир'),(298,131,'Ейск'),(299,131,'Краснодар'),(300,131,'Лениградская'),(301,131,'Майский'),(302,131,'Новомихайловский'),(303,131,'Новороссийск'),(304,131,'Ольгинка'),(305,131,'Сочи'),(306,131,'Темрюк'),(307,131,'Туапсе'),(308,132,'Ачинск'),(309,132,'Железногорск'),(310,132,'Зеленогорск'),(311,132,'Канск'),(312,132,'Красноярск'),(313,132,'Лесосибирск'),(314,132,'Минусинск'),(315,132,'Назарово'),(316,132,'Норильск'),(317,133,'Курган'),(318,133,'Шадринск'),(319,134,'Железногорск'),(320,134,'Курск'),(321,134,'Курчатов'),(322,135,'Грязи'),(323,135,'Елец'),(324,135,'Лебедянь'),(325,135,'Липецк'),(326,136,'Магадан'),(327,137,'Апрелевка'),(328,137,'Балашиха'),(329,137,'Брехово'),(330,137,'Видное'),(331,137,'Волоколамск'),(332,137,'Воскресенск'),(333,137,'Дедовск'),(334,137,'деревня Васюнино'),(335,137,'Дзержинский'),(336,137,'Дмитров'),(337,137,'Долгопрудный'),(338,137,'Домодедово'),(339,137,'Дубна'),(340,137,'Егорьевск'),(341,137,'Железнодорожный'),(342,137,'Жуковский'),(343,137,'Зарайск'),(344,137,'Звенигород'),(345,137,'Ивантеевка'),(346,137,'Игнатово'),(347,137,'Истра'),(348,137,'Каракашево'),(349,137,'Кашира'),(350,137,'Климовск'),(351,137,'Клин'),(352,137,'Коломна'),(353,137,'Королёв'),(354,137,'Котельники'),(355,137,'Красково'),(356,137,'Красноармейск'),(357,137,'Красногорск'),(358,137,'Краснознаменск'),(359,137,'Кубинка'),(360,137,'Куровское'),(361,137,'Лобня'),(362,137,'Лосино-Петровский'),(363,137,'Луховицы'),(364,137,'Лыткарино'),(365,137,'Люберцы'),(366,137,'Малаховка'),(367,137,'Можайск'),(368,137,'Москва'),(369,137,'Московский'),(370,137,'Мытищи'),(371,137,'Наро-Фоминск'),(372,137,'Новоивановское'),(373,137,'Ногинск'),(374,137,'Обушково'),(375,137,'Одинцово'),(376,137,'Ожерелье'),(377,137,'Орехово-Зуево'),(378,137,'Осташково'),(379,137,'Павловский Посад'),(380,137,'Пересвет'),(381,137,'Подольск'),(382,137,'Протвино'),(383,137,'Пушкино'),(384,137,'Пущино'),(385,137,'Раково'),(386,137,'Раменское'),(387,137,'Реутов'),(388,137,'Рошаль'),(389,137,'Руза'),(390,137,'село Верхнее Мячково'),(391,137,'Сельвачёво'),(392,137,'Сергиев Посад'),(393,137,'Серпухов'),(394,137,'Солнечногорск'),(395,137,'Старая Купавна'),(396,137,'Ступино'),(397,137,'Талдом'),(398,137,'Троицк'),(399,137,'Фирсановка'),(400,137,'Фрязино'),(401,137,'Химки'),(402,137,'Хотьково'),(403,137,'Черноголовка'),(404,137,'Чехов'),(405,137,'Шатура'),(406,137,'Шелудьково'),(407,137,'Щёлково'),(408,137,'Щербинка'),(409,137,'Электрогорск'),(410,137,'Электросталь'),(411,137,'Электроугли'),(412,137,'Юбилейный'),(413,137,'Яхрома'),(414,138,'Апатиты'),(415,138,'Мурманск'),(416,139,'Нарьян-Мар'),(417,140,'Арзамас'),(418,140,'Балахна'),(419,140,'Бор'),(420,140,'Выкса'),(421,140,'Дзержинск'),(422,140,'Кстово'),(423,140,'Нижний Новгород'),(424,140,'Павлово'),(425,140,'Рекшино'),(426,140,'Саров'),(427,141,'Боровичи'),(428,141,'Валдай'),(429,141,'Великий Новгород'),(430,141,'Старая Русса'),(431,141,'Чудово'),(432,142,'Бердск'),(433,142,'Искитим'),(434,142,'Новосибирск'),(435,143,'Омск'),(436,144,'Бузулук'),(437,144,'Новотроицк'),(438,144,'Оренбург'),(439,144,'Орск'),(440,145,'Орёл'),(441,146,'Заречный'),(442,146,'Кузнецк'),(443,146,'Пенза'),(444,147,'Березники'),(445,147,'Пермь'),(446,147,'Соликамск'),(447,148,'Артём'),(448,148,'Владивосток'),(449,148,'Находка'),(450,148,'Уссурийск'),(451,149,'Великие Луки'),(452,149,'Псков'),(453,150,'Майкоп'),(454,151,'Горно-Алтайск'),(455,152,'Кумертау'),(456,152,'Нефтекамск'),(457,152,'Октябрьский'),(458,152,'Салават'),(459,152,'СИбай'),(460,152,'Стерлитамак'),(461,152,'Уфа'),(462,153,'Улан-Удэ'),(463,154,'Дербент'),(464,154,'Каспийск'),(465,154,'Махачкала'),(466,154,'Хасавюрт'),(467,155,'Назрань'),(468,156,'Элиста'),(469,157,'Кондопога'),(470,157,'Петрозаводск'),(471,158,'Воркута'),(472,158,'Сыктывкар'),(473,158,'Ухта'),(474,159,'Евпатория'),(475,159,'Керчь'),(476,159,'Севастополь'),(477,159,'Симферополь'),(478,159,'Суворовское'),(479,159,'Феодосия'),(480,159,'Ялта'),(481,160,'Волжск'),(482,160,'Йошкар-Ола'),(483,161,'Саранск'),(484,162,'Нерюнгри'),(485,162,'Якутск'),(486,163,'Владикавказ'),(487,164,'Альметьевск'),(488,164,'Бугульма'),(489,164,'Елабуга'),(490,164,'Зеленодольск'),(491,164,'Казань'),(492,164,'Набережные Челны'),(493,164,'Нижнекамск'),(494,165,'Кызыл'),(495,166,'Абакан'),(496,166,'Саяногорск'),(497,166,'Черногорск'),(498,167,'Азов'),(499,167,'Волгодонск'),(500,167,'Каменск-Шахтинский'),(501,167,'Новочеркасск'),(502,167,'Пухляковский'),(503,167,'Ростов-на-Дону'),(504,167,'Таганрог'),(505,167,'Шахты'),(506,168,'Рязань'),(507,168,'Скопин'),(508,169,'Новокуйбышевск'),(509,169,'Прибрежный'),(510,169,'Самара'),(511,169,'Сызрань'),(512,169,'Тольятти'),(513,170,'Волосово'),(514,170,'Волхов'),(515,170,'Всеволожск'),(516,170,'Выборг'),(517,170,'Гатчина'),(518,170,'Ивангород'),(519,170,'Каменногорск'),(520,170,'Кингисепп'),(521,170,'Кириши'),(522,170,'Кировск'),(523,170,'Коммунар'),(524,170,'Кудрово'),(525,170,'Лодейное Поле'),(526,170,'Луга'),(527,170,'Никольское'),(528,170,'Новая Ладога'),(529,170,'Отрадное'),(530,170,'Приморск'),(531,170,'Приозерск'),(532,170,'Санкт-Петербург'),(533,170,'Светогорск'),(534,170,'Сертолово'),(535,170,'Сланцы'),(536,170,'Сосновый Бор'),(537,170,'Сясьстрой'),(538,170,'Тихвин'),(539,170,'Тосно'),(540,171,'Балаково'),(541,171,'Балашов'),(542,171,'Вольск'),(543,171,'Маркс'),(544,171,'Саратов'),(545,171,'Энгельс'),(546,173,'Екатеринбург'),(547,173,'Каменск-Уральский'),(548,173,'Нижний Тагил'),(549,173,'Новоуральск'),(550,173,'Первоуральск'),(551,173,'Серов'),(552,173,'Таватуй'),(553,174,'Верхнеднепровский'),(554,174,'Вязьма'),(555,174,'Рославль'),(556,174,'Смоленск'),(557,175,'Ессентуки'),(558,175,'Кисловодск'),(559,175,'Минеральные Воды'),(560,175,'Невинномысск'),(561,175,'Пятигорск'),(562,175,'Ставрополь'),(563,176,'Мичуринск'),(564,176,'Тамбов'),(565,177,'Вышний Волочёк'),(566,177,'Кимры'),(567,177,'Осташков'),(568,177,'Тверь'),(569,177,'Энергетик'),(570,178,'Северск'),(571,178,'Томск'),(572,179,'Алексин'),(573,179,'Новомосковск'),(574,179,'Тула'),(575,180,'Тобольск'),(576,180,'Тюмень'),(577,181,'Воткинск'),(578,181,'Глазов'),(579,181,'Ижевск'),(580,181,'Сарапул'),(581,182,'Ульяновск'),(582,183,'Амурск'),(583,183,'Комсомольск-на-Амуре'),(584,183,'Хабаровск'),(585,184,'Когалым'),(586,184,'Нефтеюганск'),(587,184,'Нижневартовск'),(588,184,'Нягань'),(589,184,'Сургут'),(590,184,'Ханты-Мансийск'),(591,185,'Златоуст'),(592,185,'Копейск'),(593,185,'Магнитогорск'),(594,185,'Миасс'),(595,185,'Озёрск'),(596,185,'Снежинск'),(597,185,'Троицк'),(598,185,'Челябинск'),(599,186,'Грозный'),(600,187,'Канаш'),(601,187,'Новочебоксарск'),(602,187,'Чебоксары'),(603,188,'Анадырь'),(604,190,'Ярославль'),(605,191,'Винница'),(606,191,'Могилёв-Подольский'),(607,192,'Ковель'),(608,192,'Луцк'),(609,192,'Нововолынск'),(610,193,'Днепродзержинск'),(611,193,'Днепропетровск'),(612,193,'Кривой Рог'),(613,193,'Марганец'),(614,193,'Никополь'),(615,193,'Новомосковск'),(616,193,'Павлоград'),(617,194,'Горловка'),(618,194,'Димитров'),(619,194,'Донецк'),(620,194,'Енакиево'),(621,194,'Краматорск'),(622,194,'Макеевка'),(623,194,'Мариуполь'),(624,194,'Славянск'),(625,194,'Харцы́зск'),(626,195,'Бердичев'),(627,195,'Житомир'),(628,195,'Коростень'),(629,196,'Виноградов'),(630,196,'Мукачево'),(631,196,'Ужгород'),(632,196,'Хуст'),(633,197,'Бердянск'),(634,197,'Запорожье'),(635,197,'Мелитополь'),(636,198,'Ивано-Франковск'),(637,198,'Калуш'),(638,198,'Коломыя'),(639,199,'Белая Церковь'),(640,199,'Борисполь'),(641,199,'Бровары'),(642,199,'Васильков'),(643,199,'Ирпень'),(644,199,'Киев'),(645,199,'Славутич'),(646,199,'Фастов'),(647,200,'Александрия'),(648,200,'Кировоград'),(649,200,'Светловодск'),(650,201,'Алчевск'),(651,201,'Антрацит'),(652,201,'Красный Луч'),(653,201,'Лисичанск'),(654,201,'Луганск'),(655,201,'Свердловск'),(656,201,'Стаханов'),(657,202,'Дрогобыч'),(658,202,'Львов'),(659,202,'Стрый'),(660,202,'Трускавец'),(661,203,'Николаев'),(662,203,'Первомайск'),(663,203,'Южноукраинск'),(664,204,'Белгород-Днестровский'),(665,204,'Измаил'),(666,204,'Ильичёвск'),(667,204,'Котовск'),(668,204,'Одесса'),(669,205,'Говтва'),(670,205,'Комсомольск'),(671,205,'Кременчуг'),(672,205,'Миргород'),(673,205,'Полтава'),(674,205,'Светлогорское'),(675,206,'Костополь'),(676,206,'Кузнецовск'),(677,206,'Ровно'),(678,207,'Глухов'),(679,207,'Конотоп'),(680,207,'Лебедин'),(681,207,'село Артюхово'),(682,207,'Сумы'),(683,207,'Шостка'),(684,208,'Кременец'),(685,208,'Тернополь'),(686,209,'Изюм'),(687,209,'Лозовая'),(688,209,'Мерефа'),(689,209,'Первомайский'),(690,209,'Харьков'),(691,209,'Чугуев'),(692,210,'Каховка'),(693,210,'Любимовка'),(694,210,'Скадовск'),(695,210,'Херсон'),(696,210,'Цюрупинск'),(697,211,'Дунаевцы'),(698,211,'Каменец-Подольский'),(699,211,'Хмельницкий'),(700,212,'Золотоноша'),(701,212,'Смела'),(702,212,'Умань'),(703,212,'Черкассы'),(704,213,'Нежин'),(705,213,'Прилуки'),(706,213,'Чернигов'),(707,214,'Заставна'),(708,214,'Сокиряны'),(709,214,'Черновцы');

/* Procedure structure for procedure `location_after` */

/*!50003 DROP PROCEDURE IF EXISTS  `location_after` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`%` PROCEDURE `location_after`(IN f_id INT, IN t_id INT, OUT res INT)
BEGIN
DECLARE f_lft,f_rgt,f_lev,t_lft,t_rgt,t_lev,done INT DEFAULT 0;
DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done=1;
DECLARE EXIT HANDLER FOR SQLWARNING ROLLBACK;
SET res=0;
START TRANSACTION;
SET done=0;
SELECT l_lk,l_rk,l_level
INTO f_lft,f_rgt,f_lev
FROM `location`
WHERE l_id=f_id;
IF t_id>0 THEN
SELECT l_lk,l_rk,l_level
INTO t_lft,t_rgt,t_lev
FROM `location`
WHERE l_level=f_lev AND l_id=t_id;
IF NOT done THEN
SELECT l_lk,l_rk,l_level
INTO t_lft,t_rgt,t_lev
FROM `location`
WHERE l_level=f_lev AND l_lk>t_rgt AND l_rk>t_rgt
ORDER BY l_lk ASC
LIMIT 1;
IF done THEN
SET t_lft = t_rgt+1;
SET t_rgt = t_lft+1;
SET done=0;
END IF;
END IF;
ELSE
SELECT l_lk,l_rk,l_level
INTO t_lft,t_rgt,t_lev
FROM `location`
WHERE l_lk<f_lft AND l_rk>f_rgt AND l_level<f_lev
ORDER BY l_level DESC
LIMIT 1;
IF NOT done THEN
SELECT l_lk,l_rk,l_level
INTO t_lft,t_rgt,t_lev
FROM `location`
WHERE l_level=f_lev AND l_lk>t_lft AND l_rk<t_rgt
ORDER BY l_lk ASC
LIMIT 1;
ELSE
SET done=0;
SELECT l_lk,l_rk,l_level
INTO t_lft,t_rgt,t_lev
FROM `location`
WHERE l_level=f_lev
ORDER BY l_lk ASC
LIMIT 1;
END IF;
END IF;
IF NOT done THEN
SET t_rgt=t_lft;
SET t_lft=t_lft-1;
CALL `location_relocate`(f_lft,f_rgt,f_lev,t_lft,t_rgt,t_lev-1,res);
END IF;
IF res=0 THEN
ROLLBACK;
ELSE
COMMIT;
END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `location_create` */

/*!50003 DROP PROCEDURE IF EXISTS  `location_create` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`%` PROCEDURE `location_create`(IN inPid INT, IN inAfterId INT, IN inName VARCHAR(255), OUT last_ins_id INT)
BEGIN
	DECLARE i_level INT DEFAULT 1;
	DECLARE i_right_key INT DEFAULT 1;
	DECLARE res, existsId, done INT DEFAULT 0;
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done=1;
	DECLARE EXIT HANDLER FOR SQLWARNING ROLLBACK;
	 
	SET last_ins_id=0;
	SET res=0;
	SET done=0;
		
	SELECT IFNULL(l_id, 0) INTO existsId
	FROM `location_names`
	WHERE l_pid = inPid AND l_name = inName;
	
	IF NOT done THEN
		SET last_ins_id = existsId;
	ELSE 
		SET done = 0;
		START TRANSACTION;
		
		
		SELECT IF(ISNULL(MAX(l_rk)+1), 1, MAX(l_rk)+1 ) INTO i_right_key
		FROM `location`;
		
		INSERT INTO `location`
		SET 
		l_level	= i_level, 
		l_lk	= i_right_key, 
		l_rk	= i_right_key + 1;
		SET last_ins_id = LAST_INSERT_ID();
		
		IF last_ins_id>0 THEN
			
			CALL `location_move`(last_ins_id, inPid, res);
			IF res=1 THEN
			
				CALL `location_after`(last_ins_id, inAfterId, res);
			END IF;	
			
			IF res=0 THEN
				ROLLBACK;
				SET last_ins_id=0;
			ELSE
			
				INSERT INTO `location_names` (l_id, l_pid, l_name) VALUES(last_ins_id, inPid, inName);
				
				COMMIT;
			END IF;
		ELSE 
			ROLLBACK;
		END IF;
	
	END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `location_down` */

/*!50003 DROP PROCEDURE IF EXISTS  `location_down` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`%` PROCEDURE `location_down`(IN p_id INT, OUT res INT)
BEGIN
DECLARE f_lft,f_rgt,f_lev,t_lft,t_rgt,t_lev INT DEFAULT 0;
SET res=0;
SELECT l_lk,i_l_rk,l_level
INTO f_lft,f_rgt,f_lev
FROM `location`
WHERE l_id=p_id;
SELECT l_lk,l_rk,l_level
INTO t_lft,t_rgt,t_lev
FROM `location`
WHERE l_lk<f_lft AND l_rk>f_rgt AND l_level<f_lev
ORDER BY l_level DESC
LIMIT 1;
IF t_rgt-t_lft>f_rgt-f_lft THEN
IF f_rgt+1<t_rgt THEN
SELECT l_lk,l_rk,l_level
INTO t_lft,t_rgt,t_lev
FROM `location`
WHERE l_level=f_lev AND l_lk>t_lft AND l_rk<t_rgt AND l_lk>f_rgt
ORDER BY l_lk ASC
LIMIT 1;
SET t_lft=t_rgt;
SET t_rgt=t_rgt+1;
ELSE
SELECT l_lk,l_rk,l_level
INTO t_lft,t_rgt,t_lev
FROM `location`
WHERE l_level=f_lev AND l_lk>t_lft AND l_rk<t_rgt
ORDER BY l_lk ASC
LIMIT 1;
SET t_rgt=t_lft;
SET t_lft=t_lft-1;
END IF;
CALL `location_relocate`(f_lft,f_rgt,f_lev,t_lft,t_rgt,t_lev-1,res);
END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `location_move` */

/*!50003 DROP PROCEDURE IF EXISTS  `location_move` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`%` PROCEDURE `location_move`(IN f_id INT, IN t_id INT, OUT res INT)
BEGIN
  DECLARE f_lft
  , f_rgt
  , f_lev
  , t_lft
  , t_rgt
  , t_lev
  , done INT DEFAULT 0 ;
  DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done = 1 ;
  DECLARE EXIT HANDLER FOR SQLWARNING ROLLBACK ;
  SET res = 0 ;
  SET max_sp_recursion_depth = 1 ;
  START TRANSACTION ;
  SET done = 0 ;
  SELECT 
    l_lk
    , l_rk
    , l_level INTO f_lft
    , f_rgt
    , f_lev 
  FROM
    `location` 
  WHERE l_id = f_id ;
  IF t_id = 0 
  THEN 
  SELECT 
    IFNULL(MIN(l_lk), 1) - 1
    , IFNULL(MAX(l_rk), 2) + 1
    , 0 INTO t_lft
    , t_rgt
    , t_lev 
  FROM
    `location` ;
  ELSE 
  SELECT 
    l_lk
    , l_rk
    , l_level INTO t_lft
    , t_rgt
    , t_lev 
  FROM
    `location` 
  WHERE l_id = t_id ;
  END IF ;
  IF NOT done 
  THEN 
  UPDATE 
    `location` 
  SET
    l_pid = t_id 
  WHERE l_id = f_id ;
  CALL `location_relocate` (
    f_lft
    , f_rgt
    , f_lev
    , t_lft
    , t_rgt
    , t_lev
    , res
  ) ;
  END IF ;
  IF res = 0 
  THEN ROLLBACK ;
  ELSE COMMIT ;
  END IF ;
END */$$
DELIMITER ;

/* Procedure structure for procedure `location_relocate` */

/*!50003 DROP PROCEDURE IF EXISTS  `location_relocate` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`%` PROCEDURE `location_relocate`(IN f_lft INT, IN f_rgt INT, IN f_lev INT, IN t_lft INT, IN t_rgt INT, IN t_lev INT, OUT res INT)
BEGIN
DECLARE count_pos,mv_level,mv_pos INT DEFAULT 0;
DECLARE EXIT HANDLER FOR SQLWARNING ROLLBACK;
SET res=0;
START TRANSACTION;
IF f_lft<f_rgt AND t_lft<t_rgt AND (f_lft>t_rgt OR f_rgt<t_rgt) THEN
SET count_pos=f_rgt-f_lft+1;
SET mv_level=f_lev-t_lev-1;
-- если текущий левый ключ > нового левого ключа (перемещение вверх по дереву)
IF f_lft>t_rgt THEN
SET mv_pos=f_lft-t_rgt+count_pos;
UPDATE `location`
SET
l_rk = l_rk+count_pos,
l_lk = IF(l_lk > t_lft, l_lk+count_pos, l_lk)
WHERE l_rk >= t_rgt;
UPDATE `location`
SET l_rk = l_rk - mv_pos
WHERE l_lk >= (f_lft + count_pos) AND l_rk <= (f_rgt + count_pos);
UPDATE `location`
SET
l_lk = l_lk - mv_pos,
l_level = l_level - mv_level
WHERE l_lk >= (f_lft+count_pos) AND l_rk <= (t_rgt+count_pos);
UPDATE `location`
SET
l_rk = l_rk - count_pos,
l_lk = IF(l_lk > (f_rgt+count_pos), l_lk - count_pos, l_lk)
WHERE l_rk > (f_rgt+count_pos);
ELSE
SET mv_pos = f_lft - t_rgt;
UPDATE `location`
SET
l_rk = l_rk + count_pos,
l_lk = IF(l_lk > t_lft, l_lk + count_pos, l_lk)
WHERE l_rk >= t_rgt;
UPDATE `location`
SET l_lk = l_lk - mv_pos
WHERE l_lk >= f_lft AND l_rk <= f_rgt;
UPDATE `location`
SET
l_rk = l_rk - mv_pos,
l_level = l_level - mv_level
WHERE l_lk >= t_rgt AND l_rk <= f_rgt;
UPDATE `location`
SET l_rk = l_rk - count_pos,
l_lk = IF(l_lk > f_rgt, l_lk - count_pos, l_lk)
WHERE l_rk>f_rgt;
END IF;
END IF;
SET res=1;
COMMIT;
END */$$
DELIMITER ;

/* Procedure structure for procedure `location_up` */

/*!50003 DROP PROCEDURE IF EXISTS  `location_up` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`%` PROCEDURE `location_up`(IN p_id INT, OUT res INT)
BEGIN
DECLARE f_lft,f_rgt,f_lev,t_lft,t_rgt,t_lev INT DEFAULT 0;
SET res=0;
SELECT l_lk,l_rk,l_level
INTO f_lft,f_rgt,f_lev
FROM `location`
WHERE l_id=p_id;
SELECT l_lk,l_rk,l_level
INTO t_lft,t_rgt,t_lev
FROM `location`
WHERE l_lk<f_lft AND l_rk>f_rgt AND l_level<f_lev
ORDER BY l_level DESC
LIMIT 1;
IF t_rgt-t_lft>f_rgt-f_lft THEN
IF f_lft-1>t_lft THEN
SELECT l_lk,l_rk,l_level
INTO t_lft,t_rgt,t_lev
FROM `location`
WHERE l_level=f_lev AND l_lk>t_lft AND l_rk<t_rgt AND l_rk<f_lft
ORDER BY l_rk DESC
LIMIT 1;
SET t_rgt=t_lft;
SET t_lft=t_lft-1;
ELSE
SELECT l_lk,l_rk,l_level
INTO t_lft,t_rgt,t_lev
FROM `location`
WHERE l_level=f_lev AND l_lk>t_lft AND l_rk<t_rgt
ORDER BY l_rk DESC
LIMIT 1;
SET t_lft=t_rgt;
SET t_rgt=t_rgt+1;
END IF;
CALL `location_relocate`(f_lft,f_rgt,f_lev,t_lft,t_rgt,t_lev-1,res);
END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `location_update` */

/*!50003 DROP PROCEDURE IF EXISTS  `location_update` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`%` PROCEDURE `location_update`(IN inId INT, IN inPid INT, IN inAfterId INT, IN inName VARCHAR(255), OUT res INT)
BEGIN
	DECLARE rPid, rId, rLk, rRk, bIntoSelf, existsId, done INT DEFAULT 0;
	
	DECLARE EXIT HANDLER FOR SQLWARNING ROLLBACK;
	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done=1;
	
	SET res=0;
	SET done = 0;
	
	SELECT IFNULL(l_id, 0) INTO existsId
	FROM `location_names`
	WHERE l_id <> inId AND l_pid = inPid AND l_name = inName;
	
	#если есть уже запись другая с таким именем
	IF NOT done THEN
		SET res = 0;	
	ELSE 
	
		#Выбор подчиненных узлов, включая самого себя
		SELECT 
		l_lk, l_rk INTO rLk, rRk
		FROM `location`
		WHERE l_id = inId;
		
		#запрещаем перемещать редактируемый узел в "себя" или "в свои дочерние ветки"
		SELECT EXISTS (
			SELECT 1 
			FROM `location`
			WHERE inPid IN
			(
				SELECT l_id 
				FROM `location`
				WHERE l_lk >= rLk
				AND l_rk <= rRk
			)
		) INTO bIntoSelf;
		
		START TRANSACTION;
		
		UPDATE `location_names`
		SET
		l_name	= inName,
		l_pid = inPid
		WHERE l_id = inId;
		
		#запрещаем перемещение "внутрь своей же дочерней ветки", ELSE разрешаем
		IF bIntoSelf=1 THEN
			SET res = 1;
			COMMIT;
		ELSE
			CALL `location_move`(inId, inPid, res);
			#SELECT res AS res1 FROM DUAL;
			IF res=1 THEN
				CALL `location_after`(inId, inAfterId, res);
				#SELECT res AS res2 FROM DUAL;
			END IF;	
			
			IF res=0 THEN
				ROLLBACK;
			ELSE
				COMMIT;
			END IF;
		END IF;
	END IF;
END */$$
DELIMITER ;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
