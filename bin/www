#!/usr/bin/env node
"use strict";
/**
 * Module dependencies.
 */

const app = require('../app');
const config = require('../app/config');
//const debug = require('debug')('mcjs.lo:server');
const debug = require('debug')('localhost:server');
const fs = require('fs');
const path = require('path');

/**
 * Get port from environment and store in Express.
 */
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val)
{
	let port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}
let port = normalizePort(process.env.PORT || config.port);
app.set('port', port);

/**
 * Create HTTP(S) server.
 */
//const http = require('http');
const https = require('https');

let server_opt = {
	key: config.ssl.key,
	cert: config.ssl.cert
};

const server = https.createServer(server_opt, app);
//const server = http.createServer(app);

const io = require('../app/lib/chat');
io(server, app);

//console.log(app);

/**
 * Listen on provided port, on all network interfaces.
 */


server.on('error', onError);
server.on('listening', onListening);
server.listen(port);



/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening()
{
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
	//TODO удалить или закомментировать
  debug('Listening on ' + bind);
}

//типа аккуратно выключаем сервер
//SIGINT || SIGTERM
function _shutdownService(sigName)
{
	console.log("Received kill signal ("+sigName+"), shutting down gracefully.");
	app.set(config.server_closing, true);
	server.close(function _onServerClose()
	{
		console.log("Closed out remaining connections.");
		process.exit()
	});

	setTimeout(function ()
	{
		console.error("Could not close connections in time, forcefully shutting down");
		process.exit(1);
	}, 1000);//1 sec
}
process.on('SIGINT', function _SIGINT()
{
	_shutdownService('SIGINT');
});

process.on('SIGTERM', function _SIGTERM()
{
	_shutdownService('SIGTERM');
});


/*
setInterval(function() {
	//todo замер памяти
	printMem();

}, 3000);

function printMem()
{
	let mem = process.memoryUsage();
	
	for (let p in mem)
    {
		// convert to MB
		mem[p] = mem[p] / 1000000;
	}
	console.log(mem);
}*/
