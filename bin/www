#!/usr/bin/env node
"use strict";
/**
 * Module dependencies.
 * PORT=5000 ENV=dev node --optimize_for_size --max_old_space_size=460 --nouse-idle-notification --expose-gc --gc_interval=100 bin/www
 */

const app = require('../app');
const config = require('../app/config');
//const debug = require('debug')('mcjs.lo:server');

//const Logger = require('app/lib/logger');
const debug = require('debug')('localhost:server');
const fs = require('fs');
const path = require('path');

//console.log(process.env);

/**
 * Get port from environment and store in Express.
 */
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val)
{
	let port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}
let port = normalizePort(process.env.PORT || config.port);
app.set('port', port);

/**
 * Create HTTP(S) server.
 */
let Http, Server;
if (config.https)
	Http = require('https');
else
	Http = require('http');

let server_opt = {
	key: config.ssl.key,
	cert: config.ssl.cert
};

if (config.https)
	Server = Http.createServer(server_opt, app);
else
	Server = Http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */


Server.on('error', onError);
Server.on('listening', onListening);
Server.listen(port);


const io = require('../app/lib/messenger');
//TODO надо еще тестировать!
const Messenger = io(Server);
app.set('messenger', Messenger);


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error)
{
	if (error.syscall !== 'listen') 
		throw error;

	let bind = typeof port === 'string'
	? 'Pipe ' + port
	: 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
	case 'EACCES':
		console.error(bind + ' requires elevated privileges');
		process.exit(1);
		break;
	case 'EADDRINUSE':
		console.error(bind + ' is already in use');
		process.exit(1);
		break;
	default:
		throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening()
{
	let addr = Server.address();
	let bind = typeof addr === 'string'
	? 'pipe ' + addr
	: 'port ' + addr.port;
	//TODO удалить или закомментировать
  debug('Listening on ' + bind);
}

//типа аккуратно выключаем сервер
//SIGINT || SIGTERM
function _shutdownService(sigName)
{
	console.log("Received kill signal ("+sigName+"), shutting down gracefully.");
	app.set(config.server_closing, true);
	
	Messenger.emit('appShutdown');
	
	Server.close(function _onServerClose()
	{
		console.log("Closed out remaining connections.");
		process.exit();
	});
	
	setTimeout(function ()
	{
		console.error("Could not close connections in time, forcefully shutting down");
		process.exit(1);
	}, 1000);//1 sec
}
process.on('SIGINT', function _SIGINT()
{
	_shutdownService('SIGINT');
});

process.on('SIGTERM', function _SIGTERM()
{
	_shutdownService('SIGTERM');
});


/*
setInterval(function() {
	//todo замер памяти
	printMem();

}, 3000);

function printMem()
{
	let mem = process.memoryUsage();
	
	for (let p in mem)
	{
		// convert to MB
		mem[p] = mem[p] / 1000000;
	}
	console.log(mem);
}*/
